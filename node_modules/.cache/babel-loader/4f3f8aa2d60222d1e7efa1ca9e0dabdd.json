{"ast":null,"code":"var _jsxFileName = \"/Users/loganbertrand/Documents/code/bootcamp/react-memory-game/src/App.js\";\nimport React from \"react\";\nimport Navbar from './components/Navbar';\nimport Jumbotron from './components/Jumbotron';\nimport Container from './components/Container';\nimport Card from './components/Card';\nimport characters from \"./characters.json\";\nimport './styles/App.css';\n\nclass App extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      characters,\n      score: 0,\n      highscore: 0,\n      selected: [],\n      status: \"\"\n    };\n\n    this.cardClicked = event => {\n      const currentCard = event.target.id;\n      console.log(currentCard);\n      const selectedArr = this.state.selected;\n      const alreadyClicked = selectedArr.indexOf(currentCard);\n\n      if (alreadyClicked >= 0) {\n        this.handleShuffleArr(this.state.characters);\n        console.log('already been clicked');\n        this.resetGame();\n      } else {\n        this.handleShuffleArr(this.state.characters);\n        this.setState({\n          selected: this.state.selected.concat(currentCard),\n          score: this.state.score + 1,\n          status: \"Correct! Keep Going, You Got This!\"\n        });\n        console.log(this.state.selected);\n        console.log(this.state.score);\n      }\n    };\n\n    this.handleShuffleArr = arr => {\n      let i = arr.length - 1;\n\n      for (; i > 0; i--) {\n        const j = Math.floor(Math.random() * (i + 1));\n        const temp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = temp;\n      }\n\n      return this.setState({\n        characters: arr\n      });\n    };\n\n    this.resetGame = () => {\n      if (this.state.score > this.state.highscore) {\n        this.setState({\n          highscore: this.state.score\n        });\n      }\n\n      this.setState({\n        selected: [],\n        score: 0,\n        status: \"Game Over! Try Again!\"\n      });\n    };\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72\n      },\n      __self: this\n    }, React.createElement(Navbar, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73\n      },\n      __self: this\n    }), React.createElement(Jumbotron, {\n      score: this.state.score,\n      highScore: this.state.highscore,\n      status: this.state.status,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    }), React.createElement(Container, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"row\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80\n      },\n      __self: this\n    }, this.state.characters.map(character => React.createElement(Card, {\n      cardClicked: this.cardClicked,\n      id: character.id,\n      key: character.id,\n      name: character.name,\n      image: character.image,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82\n      },\n      __self: this\n    })))));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/loganbertrand/Documents/code/bootcamp/react-memory-game/src/App.js"],"names":["React","Navbar","Jumbotron","Container","Card","characters","App","Component","state","score","highscore","selected","status","cardClicked","event","currentCard","target","id","console","log","selectedArr","alreadyClicked","indexOf","handleShuffleArr","resetGame","setState","concat","arr","i","length","j","Math","floor","random","temp","render","map","character","name","image"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport Navbar from './components/Navbar'\nimport Jumbotron from './components/Jumbotron'\nimport Container from './components/Container'\nimport Card from './components/Card'\nimport characters from \"./characters.json\";\nimport './styles/App.css';\n\nclass App extends React.Component {\n  // Setting this.state.characters to the characters json array\n  state = {\n    characters,\n\t\tscore: 0,\n\t\thighscore: 0,\n    selected: [],\n    status: \"\"\n  };\n\n  cardClicked = event => {\n    const currentCard = event.target.id\n    console.log(currentCard)\n\n    const selectedArr = this.state.selected\n    const alreadyClicked = selectedArr.indexOf(currentCard);\n\n    if (alreadyClicked >= 0){\n      this.handleShuffleArr(this.state.characters);\n      console.log('already been clicked')\n      this.resetGame()\n    }else{\n      this.handleShuffleArr(this.state.characters);\n      this.setState({\n        selected: this.state.selected.concat(currentCard),\n        score: this.state.score + 1,\n        status: \"Correct! Keep Going, You Got This!\"\n      })\n      console.log(this.state.selected)\n      console.log(this.state.score)\n    }\n    \n\n  }\n  \n  handleShuffleArr = (arr) => {\n\t\tlet i = arr.length - 1;\n\t\tfor (; i > 0; i--) {\n\t\t\tconst j = Math.floor(Math.random() * (i + 1));\n\t\t\tconst temp = arr[i];\n\t\t\tarr[i] = arr[j];\n\t\t\tarr[j] = temp;\n\t\t}\n    return this.setState({\n      characters: arr\n    });\n  }\n\n  resetGame = () => {\n    if(this.state.score > this.state.highscore){\n      this.setState({\n        highscore: this.state.score\n      })\n    }\n    this.setState({\n      selected: [],\n      score: 0,\n      status:\"Game Over! Try Again!\"\n    })\n  }\n  \n  render () {\n    return (\n      <div>\n        <Navbar/>\n          <Jumbotron\n          score={this.state.score}\n          highScore={this.state.highscore}\n          status={this.state.status}\n          />\n          <Container>\n            <div className=\"row\">\n              {this.state.characters.map(character =>(\n              <Card\n                cardClicked={this.cardClicked}\n                id={character.id}\n                key={character.id}\n                name={character.name}\n                image={character.image}\n                />\n              ))}\n            </div>\n          </Container>\n        \n      </div>\n    )\n  }\n}\n\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}